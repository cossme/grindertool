
- version: 1.1
- scenario: 
    name: XPATH testing scenario
    steps:
      - name: 'step1: XML response'
        protocol: dummy
        template_type: string
        template: '<?xml version="1.0" encoding="UTF-8"?>
 <root xmlns:foo="http://www.foo.org/" xmlns:bar="http://www.bar.org">
  <actors>
    <actor id="1">Christian Bale</actor>
    <actor id="2">Liam Neeson</actor>
    <actor id="3">Michael Caine</actor>
  </actors>
  <foo:singers>
    <foo:singer id="4">Tom Waits</foo:singer>
    <foo:singer id="5">B.B. King</foo:singer>
    <foo:singer id="6">Ray Charles</foo:singer>
  </foo:singers>
  <errorCode>1200</errorCode>
  <errorMessage>ugly error hapenned lately in the test!</errorMessage>
</root>' 
        assert:
          - xpath: //actor[2]/text()
            equals: 'Liam Neeson'
          - xpath: //actor[1]/text()
            contains: bale
            ignorecase: true
          - xpath: //errorMessage
            equals: NOT_EMPTY
          - xpath: //fantasticTag
            equals: NOT_FOUND
          #the syntax to test TOO MANY is not obvious :-)
          - xpath: //*/*[local-name()='singer']
            equals: TOO_MANY
        output:
          functionalErrorMessage:
            type: xpath
            match: //errorMessage/text()
          functionalErrorCode:
            type: xpath 
            match: //errorCode/text()
          singer2Name:
            type: regexp
            match: 'B\.B\.\s+(\w+)'
      - name: 'step2: check the error message'
        protocol: dummy
        assert:
          - contains: ugly
            response_key: functionalErrorMessage
          - equals: 1201
            response_key: functionalErrorCode
          - equals: King
            response_key: singer2Name